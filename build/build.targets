<?xml version="1.0" encoding="utf-8"?>
      
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <Import Project="$(MSBuildProjectDirectory)\buildInitial.props" />
  
    <Import Project="$(MSBuildProjectDirectory)\environment.props"
            Condition="Exists('$(MSBuildProjectDirectory)\environment.props')" />
  
    <Import Project="$(MSBuildProjectDirectory)\build.props" />
    <Import Project="$(MSBuildProjectDirectory)\build.tasks" />

		<UsingTask AssemblyFile="$(XunitExePath)"
               TaskName="Xunit.Runner.MSBuild.xunit"/>
  
    <Target Name="Clean"
            BeforeTargets="Init">
    
        <RemoveDir Directories="$(ArtifactsPath)" 
                   Condition="Exists('$(ArtifactsPath)')" 
                   ContinueOnError="true" />
	
    </Target>

    <Target Name="Init">
	    
        <MakeDir Directories="$(ArtifactsPath)" 
                 Condition="!Exists('$(ArtifactsPath)')" />
		 
        <MakeDir Directories="$(AnalysisResultsPath)" 
                 Condition="!Exists('$(AnalysisResultsPath)')" />
		 
        <MakeDir Directories="$(PackageResultsPath)" 
                 Condition="!Exists('$(PackageResultsPath)')" />
		 
        <MakeDir Directories="$(TestResultsPath)" 
                 Condition="!Exists('$(TestResultsPath)')" />
        
    </Target>

    <Target Name="PackageRestore"
            BeforeTargets="Build"
            Condition="Exists('$(NugetExe)')">
            
        <Exec Command="$(NugetExe) restore $(SolutionFile) $(NugetConfigParam)" />
        
    </Target>

    <Target Name="EnsureDependencies" 
            BeforeTargets="PackageRestore">
        
        <Error
            Text="NugetExe environment variable is not set"
            Condition="'$(NugetExe)' == ''" />
          
        <Error
            Text="NugetExe '$(NugetExe)' does not exist on the file system"
            Condition="! Exists('$(NugetExe)')" /> 
        
    </Target>

		<Target Name="FxCop"
						Condition="Exists('$(FxCopDir)') And '$(IsRunningOnTeamCity)' != 'true'">
				
				<PropertyGroup>
						<BuildAnalysisPath>$(ProjectRoot)\build\analysis</BuildAnalysisPath>
						<FxCopCustomDictionaryFile>$(BuildAnalysisPath)\FxCop.CustomDictionary.xml</FxCopCustomDictionaryFile>
						<FxCopExe>$(FxCopDir)\FxCopCmd.exe</FxCopExe>
						<PlatformDir Condition="'$(PlatformDir)' == ''">c:\Windows\Microsoft.NET\Framework\v4.0.30319</PlatformDir>
						<FxCopOptions>/summary /successfile /searchgac</FxCopOptions>
						<FxCopReportFormat>$(FxCopDir)\Xml\FxCopReport.xsl</FxCopReportFormat>
						<FxCopAnalysisLogFile>$(AnalysisResultsPath)\FxCopReport.html</FxCopAnalysisLogFile>
						<AssemblyFiles>$(BuildDestinationDir)\$(ProjectName).dll</AssemblyFiles>
				</PropertyGroup>

				<Message Text="FxCopDir is $(FxCopDir)" />
				
				<Exec 
						Command="$(FxCopExe) /dictionary:$(FxCopCustomDictionaryFile) /out:$(FxCopAnalysisLogFile) /outxsl:$(FxCopReportFormat) $(FxCopOptions) /platform:$(PlatformDir) /file:$(AssemblyFiles) /rulesetdirectory:&quot;$(FxCopDir)\..\Rule Sets&quot; /rule:+$(FxCopDir)\Rules"
						WorkingDirectory="$(FxCopDir)"/> 

		</Target>

		<Target Name="ReportCodeAnalysisResults"
						AfterTargets="FxCop"
						Condition="Exists('$(FxCopAnalysisLogFile)')">
						
				<Message
						Text="##teamcity[importData type='FxCop' path='$(FxCopAnalysisLogFile)']"
            Importance="High"
            Condition="'$(IsRunningOnTeamCity)' == 'true'" />
						
		</Target>

  <ItemGroup>
        <!-- Apply versioning to src\Common\*.cs files - should only be applied on CI server -->
    
        <RegexTransform Include="$(SourcePath)\Common\CommonVersionInfo.cs">
						<Find>AssemblyVersion\("\d+\.\d+\.\d+"\)</Find>
						<ReplaceWith>AssemblyVersion("$(Version)")</ReplaceWith>
				</RegexTransform>
				
        <RegexTransform Include="$(SourcePath)\Common\CommonVersionInfo.cs">
						<Find>AssemblyFileVersion\("\d+\.\d+\.\d+\.\d+"\)</Find>
						<ReplaceWith>AssemblyFileVersion("$(FileVersion)")</ReplaceWith>
				</RegexTransform>
				
        <RegexTransform Include="$(SourcePath)\Common\CommonVersionInfo.cs">
						<Find>AssemblyInformationalVersion\("\d+\.\d+\.\d+"\)</Find>
						<ReplaceWith>AssemblyInformationalVersion("$(ProductVersion)")</ReplaceWith>
				</RegexTransform>
				
		</ItemGroup>

    <Target Name="UpdateVersion"
            BeforeTargets="Build">
        
        <RegexTransform Items="@(RegexTransform)" />
				
		</Target>

		<Target Name="ValidateVersionInfo"
						BeforeTargets="ReportVersionInfo">

			<Error Text="MajorVersion environment variable is not set"
						 Condition="$(MajorVersion) == ''" />

			<Error Text="MinorVersion environment variable is not set"
						 Condition="$(MinorVersion) == ''" />

			<Error Text="PatchVersion environment variable is not set"
						 Condition="$(PatchVersion) == ''" />

			<Error Text="Revision environment variable is not set"
						 Condition="$(Revision) == ''" />

			<Error Text="SHA environment variable is not set"
						 Condition="$(SHA) == ''" />
		
		</Target>
		
		<Target Name="ReportVersionInfo">
      <Message Text="Component                : $(ProjectName)"
               Importance="High" />
      <Message Text="SourcePath               : '$(SourcePath)'" />
      <Message Text="PackagesPath             : '$(PackagesPath)'" />
      <Message Text="SolutionFile             : '$(SolutionFile)'" />
		
			<Message Text="Build Version" 
							 Importance="High" />

			<Message Text="MajorVersion   : '$(MajorVersion)'" />
			<Message Text="MinorVersion   : '$(MinorVersion)'" />
			<Message Text="PatchVersion   : '$(PatchVersion)'" />
			<Message Text="Revision       : '$(Revision)'" />
			<Message Text="SHA            : '$(SHA)'" />
			<Message Text="PRERELEASE     : '$(PRERELEASE)'" />

			<Message Text="Assembly Versioning" 
							 Importance="High" />
			
			<Message Text="ProductVersion : '$(ProductVersion)' -  AssemblyInformationalVersion" />
			<Message Text="FileVersion    : '$(FileVersion)' - AssemblyFileVersion" />
			<Message Text="Version        : '$(Version)' - AssemblyVersion" />

			<Message Text="NuGet Package Versioning" 
							 Importance="High" />
			
			<Message Text="PackageVersion : '$(PackageVersion)'" />

      <Message Text="Test Environment" 
							 Importance="High" />
			
			<Message Text="IsRunningOnTeamCity : '$(IsRunningOnTeamCity)'" />                 
        
    </Target>

    <Target Name="RunUnitTests">

        <ItemGroup>
            <TestAssemblies Include="$(UnitTestSelector)" />
        </ItemGroup>

        <Error Text="No test assemblies found = $(UnitTestSelector)"
               Condition="'@(TestAssemblies->Count())' &lt; 1" />

        <xunit Assemblies="@(TestAssemblies)" 
               Xml="$(OutputXmlFile)" 
               NoLogo="true" />

    </Target>

    <Target Name="ReportCodeCoverage"
            AfterTargets="RunUnitTests"
            Condition="Exists('$(OutputXmlFile)')">

        <Message Text="##teamcity[importData type='dotNetCoverage' tool='dotcover' path='$(OutputXmlFile)']"
                 Importance="High" />

    </Target>

    <Target Name="NugetPack"
            DependsOnTargets="UpdateVersion">
        
        <ItemGroup>
            <NuspecFiles Include="$(PackagingPath)\*.nuspec" />
        </ItemGroup>
        
        <Exec Command="$(NugetExe) pack %(NuspecFiles.Identity) -Verbosity detailed -Version $(PackageVersion) -OutputDirectory $(PackageResultsPath)"/>
    
    </Target>

		<Target Name="IntegrationTests"
            		DependsOnTargets="Build; NugetPack">
				
				<ItemGroup>
						<IntegrationTestAssemblies 
							Include="$(ProjectRoot)\test\integration-test\**\bin\$(Configuration)\*Integration.Test.dll"
							Exclude="$(ProjectRoot)\test\unit-test\**\*.Test.dll"/>
				</ItemGroup>
				
				<PropertyGroup>
            <IntegrationTestResults>$(OutputIntegrationXmlFile)</IntegrationTestResults>
				</PropertyGroup>

        <xunit Condition="'@(IntegrationTestAssemblies->Count())' &gt; 0"
	       Assemblies="@(IntegrationTestAssemblies)"
							 Xml="$(IntegrationTestResults)"
							 NoLogo="true" />
				
        <Message Text="##teamcity[importData type='nunit' path='$(IntegrationTestResults)']"
                 Importance="High" />
		</Target>
		
		<!-- CI Build Integration Targets - Version, Build, Test, Analyze, Package -->
		
		<Target Name="Version"
						BeforeTargets="Init">
				
				<CallTarget Targets="ReportVersionInfo" />
		
		</Target> 

		<Target Name="Build" 
						DependsOnTargets="Init">

				<Message Text="Project Root = $(ProjectRoot)" />

        <MSBuild Projects="$(SolutionFile)"
                 Targets="Build"
                 Properties="Configuration=$(Configuration)" />

        <ItemGroup>
						<Net45Libs Include="$(SourcePath)\*\bin\$(Configuration)\*.dll; $(SourcePath)\*\bin\$(Configuration)\*.pdb;" />
        </ItemGroup>

        <Copy SourceFiles="@(Net45Libs)"
              DestinationFolder="$(BuildDestinationDir)"
              SkipUnchangedFiles="True" />
        
    </Target>
    
    <Target Name="Test">
    
        <CallTarget Targets="RunUnitTests" />
    
    </Target>   
        
    <Target Name="Analyze">
    
        <CallTarget Targets="FxCop" />
        
    </Target>
    
    <Target Name="Package">
        
				<CallTarget Targets="NugetPack" />
		
    </Target>

    <Target Name="Full" 
            DependsOnTargets="Build; Test; Analyze; Package">
            
            <!-- Fire dependencies to initiate a full build -->
            
    </Target>

</Project>